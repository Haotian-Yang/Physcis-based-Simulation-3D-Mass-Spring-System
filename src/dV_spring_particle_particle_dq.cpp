#include <dV_spring_particle_particle_dq.h>
#include <iostream>

void dV_spring_particle_particle_dq(Eigen::Ref<Eigen::Vector6d> f, Eigen::Ref<const Eigen::Vector3d> q0,  Eigen::Ref<const Eigen::Vector3d>     q1, double l0, double stiffness) {

    // Test for different output from equation
    // Both works
    Eigen::Vector6d test;
    test(0) = -stiffness*(q0(0)-q1(0))*(l0-sqrt(pow(q0(0)-q1(0),2.0)+pow(q0(1)-q1(1),2.0)+pow(q0(2)-q1(2),2.0)))*1.0/sqrt(pow(q0(0)-q1(0),2.0)+pow(q0(1)-q1(1),2.0)+pow(q0(2)-q1(2),2.0)); test(1) = -stiffness*(q0(1)-q1(1))*(l0-sqrt(pow(q0(0)-q1(0),2.0)+pow(q0(1)-q1(1),2.0)+pow(q0(2)-q1(2),2.0)))*1.0/sqrt(pow(q0(0)-q1(0),2.0)+pow(q0(1)-q1(1),2.0)+pow(q0(2)-q1(2),2.0));
    test(2) = -stiffness*(q0(2)-q1(2))*(l0-sqrt(pow(q0(0)-q1(0),2.0)+pow(q0(1)-q1(1),2.0)+pow(q0(2)-q1(2),2.0)))*1.0/sqrt(pow(q0(0)-q1(0),2.0)+pow(q0(1)-q1(1),2.0)+pow(q0(2)-q1(2),2.0));
    test(3) = stiffness*(q0(0)-q1(0))*(l0-sqrt(pow(q0(0)-q1(0),2.0)+pow(q0(1)-q1(1),2.0)+pow(q0(2)-q1(2),2.0)))*1.0/sqrt(pow(q0(0)-q1(0),2.0)+pow(q0(1)-q1(1),2.0)+pow(q0(2)-q1(2),2.0));
    test(4) = stiffness*(q0(1)-q1(1))*(l0-sqrt(pow(q0(0)-q1(0),2.0)+pow(q0(1)-q1(1),2.0)+pow(q0(2)-q1(2),2.0)))*1.0/sqrt(pow(q0(0)-q1(0),2.0)+pow(q0(1)-q1(1),2.0)+pow(q0(2)-q1(2),2.0));
    test(5) = stiffness*(q0(2)-q1(2))*(l0-sqrt(pow(q0(0)-q1(0),2.0)+pow(q0(1)-q1(1),2.0)+pow(q0(2)-q1(2),2.0)))*1.0/sqrt(pow(q0(0)-q1(0),2.0)+pow(q0(1)-q1(1),2.0)+pow(q0(2)-q1(2),2.0));

    f(0) = -stiffness*(l0-sqrt(q0(0)*q1(0)*-2.0-q0(1)*q1(1)*2.0-q0(2)*q1(2)*2.0+q0(0)*q0(0)+q0(1)*q0(1)+q0(2)*q0(2)+q1(0)*q1(0)+q1(1)*q1(1)+q1(2)*q1(2)))*(q0(0)-q1(0))*1.0/sqrt(q0(0)*q1(0)*-2.0-q0(1)*q1(1)*2.0-q0(2)*q1(2)*2.0+q0(0)*q0(0)+q0(1)*q0(1)+q0(2)*q0(2)+q1(0)*q1(0)+q1(1)*q1(1)+q1(2)*q1(2));
    f(1) = -stiffness*(l0-sqrt(q0(0)*q1(0)*-2.0-q0(1)*q1(1)*2.0-q0(2)*q1(2)*2.0+q0(0)*q0(0)+q0(1)*q0(1)+q0(2)*q0(2)+q1(0)*q1(0)+q1(1)*q1(1)+q1(2)*q1(2)))*(q0(1)-q1(1))*1.0/sqrt(q0(0)*q1(0)*-2.0-q0(1)*q1(1)*2.0-q0(2)*q1(2)*2.0+q0(0)*q0(0)+q0(1)*q0(1)+q0(2)*q0(2)+q1(0)*q1(0)+q1(1)*q1(1)+q1(2)*q1(2));
    f(2) = -stiffness*(l0-sqrt(q0(0)*q1(0)*-2.0-q0(1)*q1(1)*2.0-q0(2)*q1(2)*2.0+q0(0)*q0(0)+q0(1)*q0(1)+q0(2)*q0(2)+q1(0)*q1(0)+q1(1)*q1(1)+q1(2)*q1(2)))*(q0(2)-q1(2))*1.0/sqrt(q0(0)*q1(0)*-2.0-q0(1)*q1(1)*2.0-q0(2)*q1(2)*2.0+q0(0)*q0(0)+q0(1)*q0(1)+q0(2)*q0(2)+q1(0)*q1(0)+q1(1)*q1(1)+q1(2)*q1(2));
    f(3) = (stiffness*(q0(0)*2.0-q1(0)*2.0)*(l0-sqrt(q0(0)*q1(0)*-2.0-q0(1)*q1(1)*2.0-q0(2)*q1(2)*2.0+q0(0)*q0(0)+q0(1)*q0(1)+q0(2)*q0(2)+q1(0)*q1(0)+q1(1)*q1(1)+q1(2)*q1(2)))*1.0/sqrt(q0(0)*q1(0)*-2.0-q0(1)*q1(1)*2.0-q0(2)*q1(2)*2.0+q0(0)*q0(0)+q0(1)*q0(1)+q0(2)*q0(2)+q1(0)*q1(0)+q1(1)*q1(1)+q1(2)*q1(2)))/2.0;
    f(4) = (stiffness*(q0(1)*2.0-q1(1)*2.0)*(l0-sqrt(q0(0)*q1(0)*-2.0-q0(1)*q1(1)*2.0-q0(2)*q1(2)*2.0+q0(0)*q0(0)+q0(1)*q0(1)+q0(2)*q0(2)+q1(0)*q1(0)+q1(1)*q1(1)+q1(2)*q1(2)))*1.0/sqrt(q0(0)*q1(0)*-2.0-q0(1)*q1(1)*2.0-q0(2)*q1(2)*2.0+q0(0)*q0(0)+q0(1)*q0(1)+q0(2)*q0(2)+q1(0)*q1(0)+q1(1)*q1(1)+q1(2)*q1(2)))/2.0;
    f(5) = (stiffness*(q0(2)*2.0-q1(2)*2.0)*(l0-sqrt(q0(0)*q1(0)*-2.0-q0(1)*q1(1)*2.0-q0(2)*q1(2)*2.0+q0(0)*q0(0)+q0(1)*q0(1)+q0(2)*q0(2)+q1(0)*q1(0)+q1(1)*q1(1)+q1(2)*q1(2)))*1.0/sqrt(q0(0)*q1(0)*-2.0-q0(1)*q1(1)*2.0-q0(2)*q1(2)*2.0+q0(0)*q0(0)+q0(1)*q0(1)+q0(2)*q0(2)+q1(0)*q1(0)+q1(1)*q1(1)+q1(2)*q1(2)))/2.0;

    //std::cout << "test: \n" << test << std::endl;
    //std::cout << "f: \n" << f << std::endl;

    //f << 0, 0, 0, 0, 0, 0;
}